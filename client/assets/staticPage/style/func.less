@import "setting.less";



/**
 * 创建高度
 * .height-@{num} { height: @num }
 * -> .height-100 { height: 100px }
 */
.generate-height(@i: 1) when (@i > 0) {
  .height-@{i}0 {
    height: (@i * 10px);
  }
  .generate-height(@i - 1);
}

/**
 * 创建宽度
 * .width-@{num} { width: @num }
 * -> .width-100 { width: 100px }
 */
.generate-width(@i: 1) when (@i > 0) {
  .width-@{i}0 {
    width: (@i * 10px);
  }
  .generate-width(@i - 1);
}

/**
 * flex 布局
 * .flex-@{num} {flex: @num} -> .flex-1{ flex: 1 }
 */
.generate-flex(@i: 1) when (@i > 0) {
  .flex-@{i} {
    flex: (@i);
  }
  .generate-flex(@i - 1);
}

/**
 * 透明度
 * 需要传入 透明度多少
 */
.opacity(@opacity: 50) {
  filter: alpha(opacity=@opacity);
  opacity: @opacity/100;
}

/**
 * 边框
 * 需要传入 方向，颜色，大小
 */
.border(@dir:bottom, @color: #ccc, @px: 1px) {
  border-@{dir}: @px solid @color;
}

/**
 * 投影效果
 * 需要传入 影子颜色，大小
 */
.box-shadow(@color: @shadow, @px: @shadowSize) {
  box-shadow: 0 0 @px @color;
}

/**
 * hover效果
 * 需要传入 没有hover的颜色值，与hover时的颜色值
 */
.hover(@none: @noneColor, @hover: @HoverColor) {
  background: @none;
  transition: ease 1s;
  &:hover {
    background:@hover;
    transition: ease .3s;
  }
}

/**
 * 创建按钮
 * 需要传入一个二维数组
 */
.create-btn(@i: 1) when (@i > 0) {
  // 获取其中的每一条
  @this: extract(@btn, @i);

  // 创建btn
  @names: extract(@this, 1);
  &-@{names} {
    &:extend(.disabled all);
    color: extract(@this, 2);
    background-color: extract(@this, 3);
    border: 1px solid extract(@this, 3);
    &:not([disabled]):hover {
      transition: .3s ease;
      background-color: darken(extract(@this, 3), 10%);
    }
  }

  // 创建边框型按钮
  &-@{names}-line {
    &:extend(.disabled-line all);
    color: extract(@this, 4);
    border: 1px solid extract(@this, 4);
    background-color: @White;
    &:not([disabled]):hover {
      transition: .3s ease;
      background-color: @Gray-f2;
    }
  }
  // 创建边框型按钮
  &-@{names}-dashed {
    &:extend(.disabled-dashed all);
    color: extract(@this, 4);
    border: 1px dashed @Gray-d9;
    background-color: @White;
    &:not([disabled]):hover {
      transition: .3s ease;
      background-color: @Gray-f2;
      border: 1px dashed extract(@this, 4);
    }
  }
  // 递归
  .create-btn(@i - 1);
}



.input() {
  font-size: @from-font;
  height: @from-height;
  line-height: @from-height;
  padding: 0 .6em;
  border: 1px solid @Gray-d9;
  border-radius: .4em;
  width: 100%;
  transition: ease 1s;
  &:focus {
    background: #fafafa;
    border: 1px solid #2777d1;
    box-shadow: 0 0 3px #4794ec;
    transition: ease .4s;
  }
}


.placeholder(@color: @Gray-cc) {
  &::-webkit-input-placeholder {
    color: @color;
  }
  &:-moz-placeholder {
    color: @color;
  }
  &::-moz-placeholder {
    color: @color;
  }
  &:-ms-input-placeholder {
    color: @color;
  }
}

.create-drop() {
  &{
    position: absolute;
    z-index: 1000;
    float: left;
    min-width: 160px;
    padding: 5px 0;
    margin: 2px 0 0;
    font-size: 14px;
    text-align: left;
    list-style: none;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid rgba(0,0,0,.15);
    border-radius: 4px;
    box-shadow: 0 6px 12px rgba(0,0,0,.175);
  }
}